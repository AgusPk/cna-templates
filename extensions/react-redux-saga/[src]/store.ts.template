import createSagaMiddleware from 'redux-saga';
import { createLogger } from 'redux-logger';
import { persistStore, persistReducer } from 'redux-persist';
import { applyMiddleware, createStore, compose } from 'redux';

import autoMergeLevel2 from 'redux-persist/lib/stateReconciler/autoMergeLevel2';
import storage from 'redux-persist/lib/storage';

import { StoreType } from '<%= projectImportPath %>types/store';
import reducers from '<%= projectImportPath %>reducers';
import rootSaga from '<%= projectImportPath %>sagas';

const persistConfig = {
  key: 'root',
  storage,
  blacklist: [],
  stateReconciler: autoMergeLevel2, // see "Merge Process" section for details.
};

const packages = [];
const enhancers = [];

// Saga
const sagaMiddleware = createSagaMiddleware();

// Push middleware that you need for both development and production
packages.push(sagaMiddleware);

if (import.meta.env.DEV) {
  // Push the middleware that are specific for development
  packages.push(createLogger());
  if (window.__REDUX_DEVTOOLS_EXTENSION__) {
    enhancers.push(window.__REDUX_DEVTOOLS_EXTENSION__());
  }
}

const middleware = applyMiddleware(...packages);

export const store = createStore(
  persistReducer<StoreType>(persistConfig, reducers()),
  compose(middleware, ...enhancers),
);

sagaMiddleware.run(rootSaga);

export const persistor = persistStore(store);

export default {
  store,
  persistor,
};
